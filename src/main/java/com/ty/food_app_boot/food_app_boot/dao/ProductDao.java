package com.ty.food_app_boot.food_app_boot.dao;

import java.util.List;
import java.util.Optional;

import javax.mail.MessagingException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.ty.food_app_boot.food_app_boot.FoodAppBootApplication;
import com.ty.food_app_boot.food_app_boot.Exception.EmailNotFoundException;
import com.ty.food_app_boot.food_app_boot.dto.Product;
import com.ty.food_app_boot.food_app_boot.dto.User;
import com.ty.food_app_boot.food_app_boot.repostary.ProductRepositary;

@Repository
public class ProductDao {

	@Autowired
	ProductRepositary repositary;

	@Autowired
	UserDao dao;
	
	@Autowired
	FoodAppBootApplication foodAppBootApplication;
	

	public Product saveProduct(String email, String password, Product product) {
		User user = dao.valid(email, password);
		if (user == null) {
			throw new EmailNotFoundException("Admin Email or password is not correct");
		}
		try {
			product.setUser(user);
			FoodAppBootApplication.Email(user.getEmail(), "Product Details Like :- Name : " + product.getName()
					+ " Product ID :-" + product.getId() + " is generated by you");
			foodAppBootApplication.triggerMail();
			return repositary.save(product);

		} catch (MessagingException e) {
			throw new EmailNotFoundException();
		}
	}

	public Product getProductById(int id) {
		Optional<Product> opt = repositary.findById(id);
		if (opt.isEmpty()) {
			return null;
		}
		return opt.get();
	}

	public Product updateProductById(String email, String password, int id, Product product) {
		User user = dao.valid(email, password);
		if (user == null) {
			throw new EmailNotFoundException("email or password is incorrect");
		}
		try {
			Product p = getProductById(id);
			if (p != null) {
				p.setId(id);
				p.setCost(product.getCost());
				p.setDescription(product.getDescription());
				p.setName(product.getName());
				p.setOffer(product.getOffer());
				p.setUrl(product.getUrl());
				FoodAppBootApplication.Email(user.getEmail(), "Product Details Like :- Name : " + p.getName()
						+ " Product ID :-" + p.getId() + " is updated by you");
				foodAppBootApplication.triggerMail();
				return repositary.save(p);
			}
			return null;
		} catch (MessagingException e) {
			throw new EmailNotFoundException();
		}

	}

	public boolean deleteProductById(int id) {
		Product product = getProductById(id);
		if (product != null) {
			repositary.deleteById(id);
			FoodAppBootApplication.Email(product.getUser().getEmail(), "Product Details Like :- Name : " + product.getName()
			+ " Product ID :-" + product.getId() + " is Deleted by you");
			try {
				foodAppBootApplication.triggerMail();
			} catch (MessagingException e) {
				throw new EmailNotFoundException();
			}
 			return true;
		}
		return false;
	}

	public List<Product> getallproducts() {
		return repositary.findAll();
	}

}
